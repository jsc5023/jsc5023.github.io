

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jsc5023</title>
  <subtitle>jsc5023의 블로그로, IT 개발자로서서 배운 내용을 정리하는 글로 사용됩니다.</subtitle>
  <updated>2025-01-06T00:57:55+09:00</updated>
  <author>
    <name>jsc5023</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 jsc5023 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Jwt(json web token) 쉽게 이해하기</title>
    <link href="http://localhost:4000/posts/JWT(JSON-Web-Token)-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Jwt(json web token) 쉽게 이해하기" />
    <published>2025-01-05T00:00:00+09:00</published>
  
    <updated>2025-01-05T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/JWT(JSON-Web-Token)-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/JWT(JSON-Web-Token)-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
  

  <summary>JWT(JSON Web Token) 쉽게 이해하기

웹사이트를 개발하는 도중에, 회원가입과 로그인을 만드는 도중 보안 관련이 굉장히 중요하다고 생각되었는데, 보안을 위해 JWT를 적용해야 된다는 말을 들었습니다.
제가 JWT를 알지 못했었는데, 배움을 정리하고, 제가 이해한 내용을 남들도 쉽게 이해하기 위해서 만들었습니다.

1. JWT란 무엇인가?

JWT는 JSON Web Token의 약자로, 당사자간 정보를 JSON 형태로 안전하게 전달하기 위한 토큰입니다. 
쉽게 말해, 서버가 클라이언트에게 발급해주는 “디지털 통행증”이라고 생각하면 됩니다.

실제 사용 예시

  
    # 실제 JWT 토큰 형태
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM...</summary>

  </entry>

  
  <entry>
    <title>Tdd 가볍게 이해하기</title>
    <link href="http://localhost:4000/posts/TDD-%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Tdd 가볍게 이해하기" />
    <published>2024-12-22T00:00:00+09:00</published>
  
    <updated>2024-12-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/TDD-%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/TDD-%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
  

  <summary>TDD 가볍게 이해하기: 기본 개념과 간단한 예시

Test-Driven Development(TDD)는 실제 코드를 작성하기 전에 테스트 코드를 먼저 작성하는 소프트웨어 개발 방법론입니다. 주요 특징은 다음과 같습니다:


  레드-그린-리팩터(Red-Green-Refactor) 사이클
  점진적인 개발 접근 방식
  높은 코드 품질과 안정성 확보


TDD 기본 프로세스

1. 레드(Red) 단계

  실패할 테스트 코드를 먼저 작성
  원하는 기능의 동작을 정의
  이 시점에서 테스트는 당연히 실패


2. 그린(Green) 단계

  테스트를 통과할 최소한의 구현 코드 작성
  테스트가 성공할 정도로만 코드 작성


3. 리팩터(Refactor) 단계

  코드의 품질 개선
  중복 제거
  테...</summary>

  </entry>

  
  <entry>
    <title>예시를 통해 알아보는 msa 개념</title>
    <link href="http://localhost:4000/posts/%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-MSA-%EA%B0%9C%EB%85%90/" rel="alternate" type="text/html" title="예시를 통해 알아보는 msa 개념" />
    <published>2024-12-21T00:00:00+09:00</published>
  
    <updated>2024-12-23T08:02:26+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-MSA-%EA%B0%9C%EB%85%90/</id>
    <content type="text/html" src="http://localhost:4000/posts/%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-MSA-%EA%B0%9C%EB%85%90/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
  

  <summary>🌟 예시를 통해 알아보는 MSA 개념

🌟 들어가며

MSA(Microservice Architecture)를 처음 접했을 때는 단순히 ‘서비스를 잘게 쪼개는 것’이라고만 생각했습니다. 하지만 실제로 프로젝트에 직접 적용하기 위해 공부해보니 그 이상의 깊이 있는 아키텍처 패턴이었습니다. 이 글에서는 제가 MSA를 공부하면서 깨달은 점들을 정리해보려 합니다.



🔍 MSA란 무엇인가?

MSA는 하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처입니다. 여기서 중요한 점은 단순히 ‘쪼개는 것’이 아니라, 각 서비스가 독립적으로 배포 가능하고 확장 가능하도록 만드는 것입니다.



📏 MSA와 단일 책임 원칙(SRP)

MSA는 객체지향 프로그래밍의 단...</summary>

  </entry>

  
  <entry>
    <title>라이브러리를 사용하지 않고 리스트를 만드는 방법</title>
    <link href="http://localhost:4000/posts/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="라이브러리를 사용하지 않고 리스트를 만드는 방법" />
    <published>2024-12-20T00:00:00+09:00</published>
  
    <updated>2024-12-22T09:08:58+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95/</id>
    <content type="text/html" src="http://localhost:4000/posts/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
  

  <summary>라이브러리를 사용하지 않고 Java로 리스트 구현하기

리스트는 Java에서 자주 사용되는 자료구조로, 보통 ArrayList나 LinkedList와 같은 라이브러리를 활용합니다. 하지만 이번에는 라이브러리를 사용하지 않고, 순수하게 Java로 리스트를 구현하는 방법을 알아보겠습니다.

목차

  라이브러리를 사용하지 않고 Java로 리스트 구현하기
    
      목차
      목표 기능
      리스트와 배열의 차이
      구현 과정
        
          1. 배열 초기화 및 추가 기능 구현
          2. 조회(get) 및 초기화(clear) 기능
          3. 삭제(delete) 및 삽입(insert) 기능
          4. 크기 반환(size) 및 ...</summary>

  </entry>

  
  <entry>
    <title>스프링시큐리티(spring security) 를 사용시 post 문제</title>
    <link href="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0(Spring-Security)-%EB%A5%BC-%EC%82%AC%EC%9A%A9%EC%8B%9C-Post-%EB%AC%B8%EC%A0%9C/" rel="alternate" type="text/html" title="스프링시큐리티(spring security) 를 사용시 post 문제" />
    <published>2024-12-09T00:00:00+09:00</published>
  
    <updated>2024-12-22T09:08:58+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0(Spring-Security)-%EB%A5%BC-%EC%82%AC%EC%9A%A9%EC%8B%9C-Post-%EB%AC%B8%EC%A0%9C/</id>
    <content type="text/html" src="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0(Spring-Security)-%EB%A5%BC-%EC%82%AC%EC%9A%A9%EC%8B%9C-Post-%EB%AC%B8%EC%A0%9C/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
  

  <summary>Spring Security에서 POST 요청이 처리되지 않는 문제 해결: 회원가입 구현 중 배운 점

회원가입 기능을 구현하던 중 예상치 못한 문제가 발생했습니다. 회원가입 버튼을 눌렀을 때 컨트롤러 메서드가 호출되지 않아 디버깅이 되지 않았습니다. 원인을 찾는 과정에서 Spring Security 설정에서 POST 요청 처리를 명시적으로 추가해야 한다는 점을 깨달았고, 이를 해결하는 과정을 공유합니다.



문제 상황

회원가입을 구현하는 과정에서 @PostMapping(&amp;quot;/security/sign-up&amp;quot;) 메서드가 호출되지 않았습니다. 브라우저 개발자 도구의 Network 탭을 확인해도 요청이 컨트롤러에 도달하지 않았습니다. 초기 코드 구성은 아래와 같았습니다:

컨트롤러 코드

  
    @P...</summary>

  </entry>

</feed>


