

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jsc5023</title>
  <subtitle>jsc5023의 블로그로, IT 개발자로서서 배운 내용을 정리하는 글로 사용됩니다.</subtitle>
  <updated>2025-02-27T07:57:35+09:00</updated>
  <author>
    <name>jsc5023</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 jsc5023 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Spring JPA에서 순환 참조 문제 해결하기: DTO 패턴의 중요성</title>
    <link href="http://localhost:4000/posts/%EC%88%9C%ED%99%98-%EC%B0%B8%EC%A1%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/" rel="alternate" type="text/html" title="Spring JPA에서 순환 참조 문제 해결하기: DTO 패턴의 중요성" />
    <published>2025-02-23T00:00:00+09:00</published>
  
    <updated>2025-02-27T07:36:50+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%88%9C%ED%99%98-%EC%B0%B8%EC%A1%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/%EC%88%9C%ED%99%98-%EC%B0%B8%EC%A1%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
    <category term="문제 해결" />
    
  

  <summary>순환 참조(Circular Reference) 문제는 Spring과 JPA를 사용하는 많은 개발자들이 마주치는 흔한 문제입니다. 
저도 커피 주문 시스템을 개발하면서 이 문제를 경험했고, 해결 과정에서 DTO 패턴의 중요성을 깨달았습니다.

문제 상황: 엔티티 간의 순환 참조

초기에 저는 빠른 개발을 위해 요청(Request)은 DTO로 처리했지만, 비즈니스 로직 처리 후 Model 객체에 Entity를 직접 담아 View로 전달하는 방식을 선택했습니다. 특히 Order와 OrderItem 사이의 양방향 관계를 가진 Entity를 Thymeleaf와 같은 템플릿 엔진으로 렌더링할 때 문제가 발생했습니다.


  
    @Entity
public class Order {
    @Id
    @Gen...</summary>

  </entry>

  
  <entry>
    <title>Spring JPA에서 순환 참조 문제 해결하기: DTO 패턴의 중요성</title>
    <link href="http://localhost:4000/posts/N-+-1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/" rel="alternate" type="text/html" title="Spring JPA에서 순환 참조 문제 해결하기: DTO 패턴의 중요성" />
    <published>2025-01-20T00:00:00+09:00</published>
  
    <updated>2025-01-20T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/N-+-1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/N-+-1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
    <category term="문제 해결" />
    
  

  <summary></summary>

  </entry>

  
  <entry>
    <title>build.gradle 사용시 키워드 정리하기</title>
    <link href="http://localhost:4000/posts/build-gradle-%EC%82%AC%EC%9A%A9%EC%8B%9C-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="build.gradle 사용시 키워드 정리하기" />
    <published>2025-01-20T00:00:00+09:00</published>
  
    <updated>2025-01-20T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/build-gradle-%EC%82%AC%EC%9A%A9%EC%8B%9C-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/build-gradle-%EC%82%AC%EC%9A%A9%EC%8B%9C-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
    <category term="문제 해결" />
    
  

  <summary>Hibernate를 사용하면서 ddl-auto 설정 때문에 겪었던 문제와 그 해결 방법을 공유합니다. 이 글에서는 문제 상황, 해결 과정, 그리고 배운 점을 간단히 정리해 보았습니다.



문제 상황

JPA와 Hibernate를 사용하는 도중, 다음과 같이 ddl-auto: update 설정을 사용하고 있었습니다:


  
    jpa:
  hibernate:
    ddl-auto: update

  


이 설정은 테이블을 유지하면서 변경 사항을 반영하도록 도와줍니다. 하지만, 컬럼 이름을 변경하거나 데이터 타입을 수정하는 경우에는 문제가 발생할 수 있습니다.

오류 발생 예시

  기존 테이블의 컬럼 이름을 변경한 뒤 애플리케이션을 실행했을 때, 테이블이 제대로 업데이트되지 않았습니다.
  로...</summary>

  </entry>

  
  <entry>
    <title>Hibernate 오류 해결: ddl-auto 설정 주의사항</title>
    <link href="http://localhost:4000/posts/Hibernate-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0-ddl-auto-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/" rel="alternate" type="text/html" title="Hibernate 오류 해결: ddl-auto 설정 주의사항" />
    <published>2025-01-20T00:00:00+09:00</published>
  
    <updated>2025-01-20T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Hibernate-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0-ddl-auto-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/</id>
    <content type="text/html" src="http://localhost:4000/posts/Hibernate-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0-ddl-auto-%EC%84%A4%EC%A0%95-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
    <category term="문제 해결" />
    
  

  <summary>Hibernate를 사용하면서 ddl-auto 설정 때문에 겪었던 문제와 그 해결 방법을 공유합니다. 이 글에서는 문제 상황, 해결 과정, 그리고 배운 점을 간단히 정리해 보았습니다.



문제 상황

JPA와 Hibernate를 사용하는 도중, 다음과 같이 ddl-auto: update 설정을 사용하고 있었습니다:


  
    jpa:
  hibernate:
    ddl-auto: update

  


이 설정은 테이블을 유지하면서 변경 사항을 반영하도록 도와줍니다. 하지만, 컬럼 이름을 변경하거나 데이터 타입을 수정하는 경우에는 문제가 발생할 수 있습니다.

오류 발생 예시

  기존 테이블의 컬럼 이름을 변경한 뒤 애플리케이션을 실행했을 때, 테이블이 제대로 업데이트되지 않았습니다.
  로...</summary>

  </entry>

  
  <entry>
    <title>Index에 대해서 알아보기</title>
    <link href="http://localhost:4000/posts/Index%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/" rel="alternate" type="text/html" title="Index에 대해서 알아보기" />
    <published>2025-01-06T00:00:00+09:00</published>
  
    <updated>2025-02-27T07:51:59+09:00</updated>
  
    <id>http://localhost:4000/posts/Index%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/</id>
    <content type="text/html" src="http://localhost:4000/posts/Index%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/" />
    <author>
      <name>jsc5023</name>
    </author>

  
    
    <category term="SQL" />
    
  

  <summary>1. 인덱스란?

Index 기능은 데이터의 조회를 빠르게 할 수 있는 기능으로서 사용됩니다.

비유하자면 고속검색을 위한 일종의 지도 데이터로, 특정 위치(필드)의 데이터를 찾아갈 때 전체 데이터를 살펴보지 않고도 지도(인덱스)를 통해 빠르게 원하는 데이터의 위치를 찾아갈 수 있게 해줍니다.

인덱스 생성

-- CREATE INDEX 인덱스명 ON 테이블명 (필드명);
CREATE INDEX `loginId` ON `member` (loginId);

인덱스 삭제 시 주의사항

인덱스 삭제시 MYSQL 자료를 찾는중


  DELETE : 데이터만 삭제
  TRUNCATE : 데이터와 인덱스 데이터도 삭제




이 내용과 혼동이 있었던 적이 있었는데, 인덱스 삭제는 
ALTER TABLE 테이블명...</summary>

  </entry>

</feed>


